{"filter":false,"title":"20160417150129_create_comment_hierarchies.rb","tooltip":"/db/migrate/20160417150129_create_comment_hierarchies.rb","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":16,"column":3},"end":{"row":16,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"8ff04f04e4bcee01686b9cfe6067e6502cfe02ff","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["class CreateCommentHierarchies < ActiveRecord::Migration","  def change","    create_table :comment_hierarchies do |t|","    end","  end","end",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":16,"column":3},"action":"insert","lines":["class CreateCommentHierarchies < ActiveRecord::Migration","  def change","    create_table :comment_hierarchies, :id => false do |t|","      t.integer  :ancestor_id, :null => false   # ID of the parent/grandparent/great-grandparent/... comments","      t.integer  :descendant_id, :null => false # ID of the target comment","      t.integer  :generations, :null => false   # Number of generations between the ancestor and the descendant. Parent/child = 1, for example.","    end","","    # For \"all progeny of…\" and leaf selects:","    add_index :comment_hierarchies, [:ancestor_id, :descendant_id, :generations],","              :unique => true, :name => \"comment_anc_desc_udx\"","","    # For \"all ancestors of…\" selects,","    add_index :comment_hierarchies, [:descendant_id],","              :name => \"comment_desc_idx\"","  end","end"]}]]},"timestamp":1460905338000}